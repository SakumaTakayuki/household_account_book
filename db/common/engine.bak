# create_engine:データベースへの接続を確立し、接続を扱う
# inspect:既存テーブルのカラム名やカラム型などのメタデータを取得する
from sqlalchemy import create_engine, inspect, select, update
from sqlalchemy.orm import Session, selectinload
from models import Bass, User, Usage_Detail


class Engine:
    engine = None

    def __init__(self):
        self.engine = create_engine("sqlite:///example.db", echo=True)
        inspector = inspect(self.engine)
        if len(inspector.get_table_names()) == 0:
            Bass.metadata.create_all(self.engine)

        # create_row()
        # with Session(engine) as session:
        # user = create_row()
        # user_list = create_list()
        # 1行追加
        # session.add(user)
        # 複数行追加
        # session.add_all(user_list)
        # session.commit()
        # 1行取得
        # stmt = select(User).where(User.id == "test32")
        # user = session.scalars(stmt).one()
        # 複数行取得
        # stmt = select(User)
        # user = session.scalars(stmt).all()
        # 1行更新
        # print(user.id, user.name)
        # user.name = "テスト990"
        # session.commit()
        # stmt = select(User).where(User.id == "test32")
        # user = session.scalars(stmt).one()
        # print(user.id, user.name)
        # 複数行更新
        # stmt = update(User).where(User.name == "テスト").values(name="テスト複数更新")
        # session.execute(stmt)
        # session.commit()

    def create_row():
        # user = User(
        #    id="test001", name="テスト", password="test", entry_user="administrator"
        # )
        # detail = Usage_Detail(
        #    seq=1, amount=100, kinds="食費", detail="昼ごはん", entry_user="test"
        # )
        # return detail  # user
        pass

    def create_list():
        user_list = []
        for i in range(32, 36):
            user = User(
                id=f"test{i}",
                name=f"テスト{i}",
                password=f"{i}test",
                entry_user=f"administrator{i}",
            )
            user_list.append(user)
        return user_list

    def test_insert(self):
        user = User(
            id="test995", name="テスト", password="test", entry_user="administrator"
        )
        with Session(self.engine) as session:
            session.add(user)
            session.commit()
